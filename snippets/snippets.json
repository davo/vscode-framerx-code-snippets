{
  "Framer X Code Component": {
    "prefix": "xcc",
    "body": [
      "import * as React from 'react'",
      "import { PropertyControls, ControlType } from 'framer'",
      "",
      "const style:React.CSSProperties={height:'50%',display:'flex',alignItems:'center',justifyContent:'flex-start',textAlign:'center',paddingLeft:24,fontFamily:'-apple-system, BlinkMacSystemFont',fontStyle:'normal',fontWeight:300,fontSize:'1.5rem',color:'#000000',background:'rgba(136, 85, 255, 0.1)',borderBottom:'1px solid #8855FF',overflow:'hidden'}",
      "",
      "",
      "// Define type of property",
      "interface Props {",
      "  text: string;",
      "}",
      "",
      "export class ${1:ClassName} extends React.Component<Props> {",
      "  // Set default properties",
      "  static defaultProps = {",
      "    text: 'Hello World!'",
      "  }",
      "",
      "  // Items shown in property panel",
      "  static propertyControls: PropertyControls = {",
      "    text: { type: ControlType.String, title: 'Text' }",
      "  }",
      "",
      "  render() {",
      "    return <div style={style}>{this.props.text}</div>",
      "  }",
      "}"
    ],
    "description": "This is the default React Code component created by Framer X. In Framer X, code components make use of JSX, an HTML-like markup language. Below you’ll find a very basic example of a React component. Notice how the render() method returns something very close to plain HTML and CSS."
  },
  "Import Frame": {
    "prefix": "xif",
    "body": ["import { Frame } from 'framer'"],
    "description": ""
  },
  "Import Property Controls": {
    "prefix": "xipc",
    "body": ["import { PropertyControls, ControlType } from 'framer'"],
    "description": ""
  },
  "Property Controls": {
    "prefix": "xpc",
    "body": ["static propertyControls: PropertyControls = {", "  $0", "}"],
    "description": ""
  },
  "Property Control Type Array": {
    "prefix": "xcta",
    "body": [
      "${0:children}: {",
      "  type: ControlType.Array,",
      "  propertyControl: {type: },",
      "  title: ${2:'Children'}",
      "}, "
    ],
    "description": "Array controls allows multiple values per ControlType, provided as an array via properties."
  },
  "Property Control Type String": {
    "prefix": "xcts",
    "body": [
      "${0:string}: {",
      "  type: ControlType.String,",
      "  defaultValue: '${1:Default Value}',",
      "  title: '{$2:String}',",
      "  placeholder: '{$3:Insert string value}'",
      "}, "
    ],
    "description": "String controls are displayed using a single line input field. A placeholder value can be set when needed."
  },
  "Property Control Type Color": {
    "prefix": "xctc",
    "body": [
      "${0:color}: {",
      "  type: ControlType.Color,",
      "  title: '${1:Color}'",
      "}, "
    ],
    "description": "Color controls are displayed using a color picker popover and a number input for the alpha."
  },
  "Property Control Type ComponentInstance": {
    "prefix": "xctci",
    "body": [
      "${0:children}: {",
      "  type: ControlType.ComponentInstance,",
      "  title: '${1:Children}'",
      "}, "
    ],
    "description": "ComponentInstance controls references to another components on the canvas, provided via a property."
  },
  "Property Control Type Image": {
    "prefix": "xcti",
    "body": [
      "${0:image}: {",
      "  type: ControlType.Image,",
      "  title: '${1:Image}'",
      "}, "
    ],
    "description": "Image controls are displayed using an image picker that shows a small preview. The component receives an absolute URL during rendering."
  },
  "Property Control Type Number": {
    "prefix": "xctn",
    "body": [
      "${0:number}: {",
      "  type: ControlType.Number,",
      "  title: ${2:'Number'},",
      "  defaultValue: ${1:42},",
      "  min: ${3:0},",
      "  max: ${4:100},",
      "  unit: ${6:'px'},",
      "  step: ${5:1},",
      "  displayStepper: false",
      "}, "
    ],
    "description": "Number controls are displayed using an input field and a slider. The min and max values can be specified to constraint the output. The default step size is 1. When a step size smaller then 1 is entered, the output will be floats. When the unit type is set to %, the input field will display 10 as 10%."
  },
  "Property Control Type Fused Number": {
    "prefix": "xctfn",
    "body": [
      "${0:fusedNumber}: {",
      "  type: ControlType.FusedNumber,",
      "  title: '$1',",
      "  toggleKey: '$2',",
      "  toggleTitles: ['All Options', 'Each Option'],",
      "  valueKeys: ['Top', 'Right', 'Bottom', 'Left'],",
      "  valueLabels: ['T', 'R', 'B', 'L'],",
      "  min: ${3:1}",
      "}, "
    ],
    "description": ""
  },
  "Property Control Type Boolean": {
    "prefix": "xctb",
    "body": [
      "${0:boolean}: {",
      "  type: ControlType.Boolean,",
      "  title: '$1',",
      "  enabledTitle: '$2',",
      "  disabledTitle: '$3'",
      "}, "
    ],
    "description": "Booleans use a segmented control. The segment titles are True and False by default but these can be overridden using the enabledTitle and disabledTitle."
  },
  "Property Control Type Segmented Enum": {
    "prefix": "xctse",
    "body": [
      "${0:segmentedEnum}: {",
      "  type: ControlType.SegmentedEnum,",
      "  title: '$1'",
      "  options: [$2, $3]",
      "  optionTitles: [$4, $5]",
      "}, "
    ],
    "description": "A segmented enum control is displayed using a segmented control. Since a segmented control has limited space this only works for a tiny set of string values."
  },
  "Property Control Type Enum": {
    "prefix": "xcte",
    "body": [
      "${0:enum}: {",
      "  type: ControlType.Enum,",
      "  title: '$1',",
      "  options: [$2, $3],",
      "  optionTitles: [$4, $5]",
      "}, ",
      "$6"
    ],
    "description": "An enum control displays a pop-up button with a fixed set of string values. The optionTitles can be set to have nicely formatted values for in the UI."
  },
  "Property Control Type File": {
    "prefix": "xctf",
    "body": [
      "${0:file}: {",
      "  type: ControlType.File,",
      "  title: '$1',",
      "  allowedFileTypes: ['$2', '$3'],",
      "}, "
    ],
    "description": "File controls are displayed using a file picker that shows the file name after selecting a file. The component receives an absolute URL during rendering. The allowedFileTypes is an array containing all allowed file types, like so: ['json', 'obj', 'collada']."
  },
  "Hide Control Types Pattern": {
    "prefix": "xcpct",
    "body": [
      "import * as React from 'react'",
      "import { PropertyControls, ControlType } from 'framer'",
      "",
      "const style:React.CSSProperties={height:'50%',display:'flex',alignItems:'center',justifyContent:'flex-start',textAlign:'center',paddingLeft:24,fontFamily:'-apple-system, BlinkMacSystemFont',fontStyle:'normal',fontWeight:300,fontSize:'1.5rem',color:'#000000',background:'rgba(136, 85, 255, 0.1)',borderBottom:'1px solid #8855FF',overflow:'hidden'}",
      "",
      "interface Props {",
      "  isEnabled: boolean",
      "  isActive: boolean",
      "}",
      "export class ${1:ClassName} extends React.Component<Props> {",
      "  static defaultProps: Props = {",
      "    isEnabled: false,",
      "    isActive: false",
      "  }",
      "  static propertyControls: PropertyControls = {",
      "    isEnabled: { type: ControlType.Boolean },",
      "    isActive: {",
      "      type: ControlType.Boolean,",
      "      hidden(props) {",
      "        return props.isEnabled === false",
      "      }",
      "    }",
      "  }",
      "",
      "  render() {",
      "    let { isEnabled, isActive } = this.props",
      "",
      "    return (",
      "      <>",
      "        <div style={style}>{`Is enabled? ${isEnabled}`}</div>",
      "        <div style={style}>{`Is active? ${isActive}`}</div>",
      "      </>",
      "    )",
      "  }",
      "}"
    ],
    "description": "Property control types can be hidden by implementing the hidden function on the property description."
  },
  "import": {
    "prefix": "ximp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "ximn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "ximd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "xime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "xima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportDefault": {
    "prefix": "xexp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "xexd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "xexa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "xenf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "xedf",
    "body": ["export default (${1:params}) => {", "  $0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },
  "TSPropsStatesInterfaces": {
    "prefix": "xps",
    "body": [
      "interface Props {",
      "  $0: $1",
      "}",
      "",
      "interface State {",
      "  $2: $3",
      "}"
    ]
  },
  "useIdentifier": {
    "prefix": "xui",
    "body": [
      "function useIdentifier() {",
      "  return useStaticValue(uuidv4)",
      "}",
      "",
      "function uuidv4() {",
      "  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {",
      "    var r = (Math.random() * 16) | 0,",
      "      v = c == \"x\" ? r : (r & 0x3) | 0x8;",
      "    return v.toString(16);",
      "  });",
      "}"
    ],
    "description": "Hook to return an unique identifier by Jonas Treub."
  },
  "useStaticValue": {
    "prefix": "xusv",
    "body": [
      "export function useStaticValue<T = any>(${0:generateValue}: () => T): T {",
      "  const ref = useRef<T>(null);",
      "",
      "  if (!ref.current) {",
      "    ref.current = ${1:generateValue}();",
      "  }",
      "",
      "  return ref.current;",
      "}"

    ],
    "description": "Hook to return a static value by Jonas Treub."
  },
  "useState": {
    "prefix": "xus",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ],
    "description": [
      "Returns a stateful value, and a function to update it.\n",
      "During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\n",
      "The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component."
    ]
  },
  "useEffect": {
    "prefix": "xue",
    "body": [
      "useEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  };",
      "}, [${2:input}])"
    ],
    "description": [
      "Accepts a function that contains imperative, possibly effectful code.\n",
      "Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.\n",
      "Instead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\n",
      "By default, effects run after every completed render, but you can choose to fire it only when certain values have changed."
    ]
  },
  "useContext": {
    "prefix": "xuc",
    "body": ["const ${1:context} = useContext(${2:contextValue})"],
    "description": [
      "Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree.\n",
      "When the nearest <MyContext.Provider> above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider."
    ]
  },
  "useReducer": {
    "prefix": "xur",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ],
    "description": [
      "An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)\n",
      "useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks."
    ]
  },
  "useCallback": {
    "prefix": "xucb",
    "body": [
      "const memoizedCallback = useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ],
    "description": [
      "Returns a memoized callback.\n",
      "Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate)."
    ]
  },
  "useMemo": {
    "prefix": "xum",
    "body": ["const memoizedValue = useMemo(() => ${1:function}, ${2:input})"],
    "description": [
      "Returns a memoized value.\n",
      "Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n",
      "Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\n",
      "If no array is provided, a new value will be computed on every render."
    ]
  },
  "useRef": {
    "prefix": "xuref",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"],
    "description": "useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component."
  },
  "useImperativeHandle": {
    "prefix": "xuih",
    "body": [
      "useImperativeHandle(",
      "  ${1:ref},",
      "  () => {",
      "    ${2:handler}",
      "  },",
      "  [${3:input}],",
      ")"
    ],
    "description": "Customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases."
  },
  "useLayoutEffect": {
    "prefix": "xule",
    "body": [
      "useLayoutEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  },",
      "  [${2:input}]",
      "})"
    ],
    "description": [
      "The signature is identical to useEffect, but it fires synchronously after all DOM mutations.\n",
      "Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint."
    ]
  },
  "useDebugValue": {
    "prefix": "xudv",
    "body": ["useDebugValue(${1:value})"],
    "description": "Can be used to display a label for custom hooks in React DevTools."
  },
  "Random Color": {
    "prefix": "xrc",
    "body": [
      "function randomColor() {",
      "    return '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6);",
      "}"
    ],
    "description": "Random color function by Emil Widlund"
  }
}
